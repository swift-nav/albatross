name: CI

on:
  pull_request:
  push:
    branches:
      - 'master'

jobs:

  ubuntu-gcc11:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install gcc-11
        run: |
          sudo apt-get update
          sudo apt-get install build-essential software-properties-common -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install gcc-11 g++-11 -y
          gcc -v
      - name: Run build
        env:
          CC: gcc-11
          CXX: g++-11
          TESTENV: gcc11
          GCCVER: "11"
        run: |
          bash ./ci/run_tests.sh
          bash ./ci/ensure_copyright.sh

  ubuntu-clang14:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install clang-14
        run: |
          sudo apt-get update
          sudo apt-get install build-essential software-properties-common -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install clang-14
          gcc -v
      - name: Run build
        env:
          CC: clang-14
          CXX: clang++-14
          TESTENV: clang14
        run: |
          bash ./ci/run_tests.sh
          bash ./ci/ensure_copyright.sh

  ubuntu-clang14-sanitizers:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test:
          - { name: "address-undefined-leak", script: "./ci/run_address_sanitizer_tests.sh" }
          - { name: "thread", script: "./ci/run_thread_sanitizer_tests.sh" }
          # Memory sanitizer is not run because it requires building a
          # custom instrumented libc.
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install clang-14
        run: |
          sudo apt-get update
          sudo apt-get install build-essential software-properties-common -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install clang-14
          clang -v
      - name: Run (${{ matrix.test.name }}) sanitizer tests
        env:
          CC: clang-14
          CXX: clang++-14
          TESTENV: clang14
        run: |
          bash "${{ matrix.test.script }}"

  format:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install clang-14
        run: |
          sudo apt-get update
          sudo apt-get install build-essential software-properties-common -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install clang-14 clang-format-14
      - name: Run build
        env:
          CC: clang-14
          CXX: clang++-14
        run: |
          bash ./ci/ensure_formated.sh

  bazel:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install gcc-6
        run: |
          sudo apt-get update
          sudo apt-get install gcc-11 g++-11 -y
          gcc -v
      - name: Run build
        run: |
          bazel test //...

  osx-clang:
    runs-on: macOS-latest
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: check clang
        run: |
          clang --version
      - name: Run build
        env:
          CC: clang
          CXX: clang++
          TESTENV: clang
        run: |
          bash ./ci/run_tests.sh

  ubuntu-build-documentation:
    runs-on: "ubuntu-22.04"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install Prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install build-essential software-properties-common -y
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          
      - name: Build Docs
        run: |
          conda env create --file ./ci/albatross_docs_environment.yml
          conda activate albatross
          cd doc
          make html

  clang-tidy:
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install clang-tools-14
        run: |
          sudo apt-get update && \
          sudo apt-get install build-essential software-properties-common -y && \
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
          sudo apt-get update && \
          sudo apt-get install clang-14 clang-tools-14 clang-tidy-14 && \
          sudo ln -s /usr/bin/clang-apply-replacements-14 /usr/local/bin/clang-apply-replacements
      - name: Run build
        continue-on-error: true
        env:
          CC: clang-14
          CXX: clang++-14
        run: |
          bash ./ci/run_tidy.sh
